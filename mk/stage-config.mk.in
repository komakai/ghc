#								 -*-makefile-*-
# @configure_input@
#
################################################################################
#
# stage-config.mk.in
#
# This file supplies defaults for many tweakable build configuration
# options.  Some of the defaults are filled in by the autoconf-generated
# configure script.
#
# DO NOT EDIT THIS FILE!
#
# 	- stage-config.mk is auto-generated from stage-config.mk.in by configure.
#	  If you edit stage-config.mk your changes will be spammed.

WhatGccIsCalledStage@STAGE@ = @WhatGccIsCalled@
CC_STAGE@STAGE@ = @WhatGccIsCalled@
AS_STAGE@STAGE@ = @WhatGccIsCalled@
LD_STAGE@STAGE@ = @LdCmd@

# C compiler and linker flags from configure (e.g. -m<blah> to select
# correct C compiler backend). The stage number is the stage of GHC
# that is being used to compile with.
# NOTE: The STAGE will actually have already been determined by the time
# this file is included so define STAGE to equal that stage regardless of
# the stage indicated in the variable name
CONF_CC_OPTS_STAGE@STAGE@ = @CONF_CC_OPTS@ -DSTAGE=@STAGE@
CONF_GCC_LINKER_OPTS_STAGE@STAGE@ = @LDFLAGS@
CONF_LD_LINKER_OPTS_STAGE@STAGE@ = @CONF_LD_LINKER_OPTS@
CONF_CPP_OPTS_STAGE@STAGE@ = @CONF_CPP_OPTS@

CFlagOpsStage@STAGE@ = $(foreach opt,$(CONF_CC_OPTS_STAGE@STAGE@),-optc$(opt))
AFlagOpsStage@STAGE@ = $(foreach opt,$(CONF_CC_OPTS_STAGE@STAGE@),-opta$(opt))
LDFlagOpsStage@STAGE@ = $(foreach opt,$(CONF_GCC_LINKER_OPTS_STAGE@STAGE@),-optl$(opt))
XFlagsOpsStage@STAGE@ = $(filter -D%,$(CONF_CC_OPTS_STAGE@STAGE@))

SRC_HSC2HS_OPTS_STAGE@STAGE@ += $(addprefix --cflag=,$(filter-out -O,$(SRC_CC_OPTS) $(CONF_CC_OPTS_STAGE@STAGE@)))
SRC_HSC2HS_OPTS_STAGE@STAGE@ += $(addprefix --cflag=,$(CONF_CPP_OPTS_STAGE@STAGE@))
SRC_HSC2HS_OPTS_STAGE@STAGE@ += $(addprefix --lflag=,$(CONF_GCC_LINKER_OPTS_STAGE@STAGE@))

AR_STAGE@STAGE@ = @ArCmd@
AR_OPTS_STAGE@STAGE@ = @ArArgs@
EXTRA_AR_ARGS_STAGE@STAGE@ = $(EXTRA_AR_ARGS)
ArSupportsAtFile_STAGE@STAGE@ = @ArSupportsAtFile@

# It's not easy to separate the CPP program from its flags, as
# AC_PROG_CPP defines CPP as "/usr/bin/gcc -E"
CPP_STAGE@STAGE@ = @CPP@ @CPPFLAGS@

################################################################################
#
#		Platform variables
#
################################################################################

# A "platform" is the GNU cpu-type/manufacturer/operating-system target machine
# specifier.  E.g. sparc-sun-solaris2
#
# Build  platform: the platform on which we are doing this build
# Host   platform: the platform on which these binaries will run
# Target platform: the platform for which this compiler will generate code
#
# We don't support build & host being different, because the build
# process creates binaries that are run during the build, and also
# installed.
#
# If host & target are different, then we are building a compiler
# which will generate intermediate .hc files to port to the target
# architecture for bootstrapping.  The libraries and stage 2 compiler
# will be built as HC files for the target system, and likely won't
# build on this host platform.
#
# An important invariant is that for any piece of source code, the
# platform on which the code is going to run is the HOST platform,
# and the platform on which we are building is the BUILD platform.
# Additionally for the compiler, the platform this compiler will
# generate code for is the TARGET.  TARGET is not meaningful outside
# the compiler sources.
#
# Guidelines for when to use HOST vs. TARGET:
#
#  - In the build system (Makefile, foo.mk), normally we should test
#    $(HOSTPLATFORM).  There are some cases (eg. installation), where
#    we expect $(HOSTPLATFORM)==$(TARGETPLATFORM), so in those cases it
#    doesn't matter which is used.
#
#  - In the compiler itself, we should test HOST or TARGET depending
#    on whether the conditional relates to the code being generated, or
#    the platform on which the compiler is running.  See the section
#    on "Coding Style" in the commentary for more details.
#
#  - In all other code, we should be testing HOST only.
#
# NOTE: cross-compiling is not well supported by the build system.
# You have to do a lot of work by hand to cross compile: see the
# section on "Porting GHC" in the Building Guide.

HOSTPLATFORM_STAGE@STAGE@			= @HostPlatform@
TARGETPLATFORM_STAGE@STAGE@			= @TargetPlatform@
BUILDPLATFORM_STAGE@STAGE@			= @BuildPlatform@

HostPlatform_CPP_STAGE@STAGE@		= @HostPlatform_CPP@
HostArch_CPP_STAGE@STAGE@			= @HostArch_CPP@
HostOS_CPP_STAGE@STAGE@				= @HostOS_CPP@
HostVendor_CPP_STAGE@STAGE@			= @HostVendor_CPP@

TargetPlatform_CPP_STAGE@STAGE@		= @TargetPlatform_CPP@
TargetArch_CPP_STAGE@STAGE@			= @TargetArch_CPP@
TargetOS_CPP_STAGE@STAGE@			= @TargetOS_CPP@
TargetVendor_CPP_STAGE@STAGE@		= @TargetVendor_CPP@

BuildPlatform_CPP_STAGE@STAGE@		= @BuildPlatform_CPP@
BuildArch_CPP_STAGE@STAGE@			= @BuildArch_CPP@
BuildOS_CPP_STAGE@STAGE@			= @BuildOS_CPP@
BuildVendor_CPP_STAGE@STAGE@		= @BuildVendor_CPP@

@HostPlatform_CPP@_HOST_STAGE@STAGE@           = 1
@TargetPlatform_CPP@_TARGET_STAGE@STAGE@       = 1
@BuildPlatform_CPP@_BUILD_STAGE@STAGE@         = 1

@HostArch_CPP@_HOST_ARCH_STAGE@STAGE@          = 1
@TargetArch_CPP@_TARGET_ARCH_STAGE@STAGE@      = 1
@BuildArch_CPP@_BUILD_ARCH_STAGE@STAGE@        = 1

@HostOS_CPP@_HOST_OS_STAGE@STAGE@              = 1
@TargetOS_CPP@_TARGET_OS_STAGE@STAGE@          = 1
@BuildOS_CPP@_BUILD_OS_STAGE@STAGE@            = 1

@HostVendor_CPP@_HOST_VENDOR_STAGE@STAGE@      = 1
@TargetVendor_CPP@_TARGET_VENDOR_STAGE@STAGE@  = 1
@BuildVendor_CPP@_BUILD_VENDOR_STAGE@STAGE@    = 1
